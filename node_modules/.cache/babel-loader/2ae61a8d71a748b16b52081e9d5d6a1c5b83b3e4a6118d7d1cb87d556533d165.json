{"ast":null,"code":"/*!\n * jQuery UI Menu 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Menu\n//>>group: Widgets\n//>>description: Creates nestable menus.\n//>>docs: http://api.jqueryui.com/menu/\n//>>demos: http://jqueryui.com/menu/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/menu.css\n//>>css.theme: ../../themes/base/theme.css\n\n(function (factory) {\n  \"use strict\";\n\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([\"jquery\", \"../keycode\", \"../position\", \"../safe-active-element\", \"../unique-id\", \"../version\", \"../widget\"], factory);\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n})(function ($) {\n  \"use strict\";\n\n  return $.widget(\"ui.menu\", {\n    version: \"1.13.2\",\n    defaultElement: \"<ul>\",\n    delay: 300,\n    options: {\n      icons: {\n        submenu: \"ui-icon-caret-1-e\"\n      },\n      items: \"> *\",\n      menus: \"ul\",\n      position: {\n        my: \"left top\",\n        at: \"right top\"\n      },\n      role: \"menu\",\n      // Callbacks\n      blur: null,\n      focus: null,\n      select: null\n    },\n    _create: function () {\n      this.activeMenu = this.element;\n\n      // Flag used to prevent firing of the click handler\n      // as the event bubbles up through nested menus\n      this.mouseHandled = false;\n      this.lastMousePosition = {\n        x: null,\n        y: null\n      };\n      this.element.uniqueId().attr({\n        role: this.options.role,\n        tabIndex: 0\n      });\n      this._addClass(\"ui-menu\", \"ui-widget ui-widget-content\");\n      this._on({\n        // Prevent focus from sticking to links inside menu after clicking\n        // them (focus should always stay on UL during navigation).\n        \"mousedown .ui-menu-item\": function (event) {\n          event.preventDefault();\n          this._activateItem(event);\n        },\n        \"click .ui-menu-item\": function (event) {\n          var target = $(event.target);\n          var active = $($.ui.safeActiveElement(this.document[0]));\n          if (!this.mouseHandled && target.not(\".ui-state-disabled\").length) {\n            this.select(event);\n\n            // Only set the mouseHandled flag if the event will bubble, see #9469.\n            if (!event.isPropagationStopped()) {\n              this.mouseHandled = true;\n            }\n\n            // Open submenu on click\n            if (target.has(\".ui-menu\").length) {\n              this.expand(event);\n            } else if (!this.element.is(\":focus\") && active.closest(\".ui-menu\").length) {\n              // Redirect focus to the menu\n              this.element.trigger(\"focus\", [true]);\n\n              // If the active item is on the top level, let it stay active.\n              // Otherwise, blur the active item since it is no longer visible.\n              if (this.active && this.active.parents(\".ui-menu\").length === 1) {\n                clearTimeout(this.timer);\n              }\n            }\n          }\n        },\n        \"mouseenter .ui-menu-item\": \"_activateItem\",\n        \"mousemove .ui-menu-item\": \"_activateItem\",\n        mouseleave: \"collapseAll\",\n        \"mouseleave .ui-menu\": \"collapseAll\",\n        focus: function (event, keepActiveItem) {\n          // If there's already an active item, keep it active\n          // If not, activate the first item\n          var item = this.active || this._menuItems().first();\n          if (!keepActiveItem) {\n            this.focus(event, item);\n          }\n        },\n        blur: function (event) {\n          this._delay(function () {\n            var notContained = !$.contains(this.element[0], $.ui.safeActiveElement(this.document[0]));\n            if (notContained) {\n              this.collapseAll(event);\n            }\n          });\n        },\n        keydown: \"_keydown\"\n      });\n      this.refresh();\n\n      // Clicks outside of a menu collapse any open menus\n      this._on(this.document, {\n        click: function (event) {\n          if (this._closeOnDocumentClick(event)) {\n            this.collapseAll(event, true);\n          }\n\n          // Reset the mouseHandled flag\n          this.mouseHandled = false;\n        }\n      });\n    },\n    _activateItem: function (event) {\n      // Ignore mouse events while typeahead is active, see #10458.\n      // Prevents focusing the wrong item when typeahead causes a scroll while the mouse\n      // is over an item in the menu\n      if (this.previousFilter) {\n        return;\n      }\n\n      // If the mouse didn't actually move, but the page was scrolled, ignore the event (#9356)\n      if (event.clientX === this.lastMousePosition.x && event.clientY === this.lastMousePosition.y) {\n        return;\n      }\n      this.lastMousePosition = {\n        x: event.clientX,\n        y: event.clientY\n      };\n      var actualTarget = $(event.target).closest(\".ui-menu-item\"),\n        target = $(event.currentTarget);\n\n      // Ignore bubbled events on parent items, see #11641\n      if (actualTarget[0] !== target[0]) {\n        return;\n      }\n\n      // If the item is already active, there's nothing to do\n      if (target.is(\".ui-state-active\")) {\n        return;\n      }\n\n      // Remove ui-state-active class from siblings of the newly focused menu item\n      // to avoid a jump caused by adjacent elements both having a class with a border\n      this._removeClass(target.siblings().children(\".ui-state-active\"), null, \"ui-state-active\");\n      this.focus(event, target);\n    },\n    _destroy: function () {\n      var items = this.element.find(\".ui-menu-item\").removeAttr(\"role aria-disabled\"),\n        submenus = items.children(\".ui-menu-item-wrapper\").removeUniqueId().removeAttr(\"tabIndex role aria-haspopup\");\n\n      // Destroy (sub)menus\n      this.element.removeAttr(\"aria-activedescendant\").find(\".ui-menu\").addBack().removeAttr(\"role aria-labelledby aria-expanded aria-hidden aria-disabled \" + \"tabIndex\").removeUniqueId().show();\n      submenus.children().each(function () {\n        var elem = $(this);\n        if (elem.data(\"ui-menu-submenu-caret\")) {\n          elem.remove();\n        }\n      });\n    },\n    _keydown: function (event) {\n      var match,\n        prev,\n        character,\n        skip,\n        preventDefault = true;\n      switch (event.keyCode) {\n        case $.ui.keyCode.PAGE_UP:\n          this.previousPage(event);\n          break;\n        case $.ui.keyCode.PAGE_DOWN:\n          this.nextPage(event);\n          break;\n        case $.ui.keyCode.HOME:\n          this._move(\"first\", \"first\", event);\n          break;\n        case $.ui.keyCode.END:\n          this._move(\"last\", \"last\", event);\n          break;\n        case $.ui.keyCode.UP:\n          this.previous(event);\n          break;\n        case $.ui.keyCode.DOWN:\n          this.next(event);\n          break;\n        case $.ui.keyCode.LEFT:\n          this.collapse(event);\n          break;\n        case $.ui.keyCode.RIGHT:\n          if (this.active && !this.active.is(\".ui-state-disabled\")) {\n            this.expand(event);\n          }\n          break;\n        case $.ui.keyCode.ENTER:\n        case $.ui.keyCode.SPACE:\n          this._activate(event);\n          break;\n        case $.ui.keyCode.ESCAPE:\n          this.collapse(event);\n          break;\n        default:\n          preventDefault = false;\n          prev = this.previousFilter || \"\";\n          skip = false;\n\n          // Support number pad values\n          character = event.keyCode >= 96 && event.keyCode <= 105 ? (event.keyCode - 96).toString() : String.fromCharCode(event.keyCode);\n          clearTimeout(this.filterTimer);\n          if (character === prev) {\n            skip = true;\n          } else {\n            character = prev + character;\n          }\n          match = this._filterMenuItems(character);\n          match = skip && match.index(this.active.next()) !== -1 ? this.active.nextAll(\".ui-menu-item\") : match;\n\n          // If no matches on the current filter, reset to the last character pressed\n          // to move down the menu to the first item that starts with that character\n          if (!match.length) {\n            character = String.fromCharCode(event.keyCode);\n            match = this._filterMenuItems(character);\n          }\n          if (match.length) {\n            this.focus(event, match);\n            this.previousFilter = character;\n            this.filterTimer = this._delay(function () {\n              delete this.previousFilter;\n            }, 1000);\n          } else {\n            delete this.previousFilter;\n          }\n      }\n      if (preventDefault) {\n        event.preventDefault();\n      }\n    },\n    _activate: function (event) {\n      if (this.active && !this.active.is(\".ui-state-disabled\")) {\n        if (this.active.children(\"[aria-haspopup='true']\").length) {\n          this.expand(event);\n        } else {\n          this.select(event);\n        }\n      }\n    },\n    refresh: function () {\n      var menus,\n        items,\n        newSubmenus,\n        newItems,\n        newWrappers,\n        that = this,\n        icon = this.options.icons.submenu,\n        submenus = this.element.find(this.options.menus);\n      this._toggleClass(\"ui-menu-icons\", null, !!this.element.find(\".ui-icon\").length);\n\n      // Initialize nested menus\n      newSubmenus = submenus.filter(\":not(.ui-menu)\").hide().attr({\n        role: this.options.role,\n        \"aria-hidden\": \"true\",\n        \"aria-expanded\": \"false\"\n      }).each(function () {\n        var menu = $(this),\n          item = menu.prev(),\n          submenuCaret = $(\"<span>\").data(\"ui-menu-submenu-caret\", true);\n        that._addClass(submenuCaret, \"ui-menu-icon\", \"ui-icon \" + icon);\n        item.attr(\"aria-haspopup\", \"true\").prepend(submenuCaret);\n        menu.attr(\"aria-labelledby\", item.attr(\"id\"));\n      });\n      this._addClass(newSubmenus, \"ui-menu\", \"ui-widget ui-widget-content ui-front\");\n      menus = submenus.add(this.element);\n      items = menus.find(this.options.items);\n\n      // Initialize menu-items containing spaces and/or dashes only as dividers\n      items.not(\".ui-menu-item\").each(function () {\n        var item = $(this);\n        if (that._isDivider(item)) {\n          that._addClass(item, \"ui-menu-divider\", \"ui-widget-content\");\n        }\n      });\n\n      // Don't refresh list items that are already adapted\n      newItems = items.not(\".ui-menu-item, .ui-menu-divider\");\n      newWrappers = newItems.children().not(\".ui-menu\").uniqueId().attr({\n        tabIndex: -1,\n        role: this._itemRole()\n      });\n      this._addClass(newItems, \"ui-menu-item\")._addClass(newWrappers, \"ui-menu-item-wrapper\");\n\n      // Add aria-disabled attribute to any disabled menu item\n      items.filter(\".ui-state-disabled\").attr(\"aria-disabled\", \"true\");\n\n      // If the active item has been removed, blur the menu\n      if (this.active && !$.contains(this.element[0], this.active[0])) {\n        this.blur();\n      }\n    },\n    _itemRole: function () {\n      return {\n        menu: \"menuitem\",\n        listbox: \"option\"\n      }[this.options.role];\n    },\n    _setOption: function (key, value) {\n      if (key === \"icons\") {\n        var icons = this.element.find(\".ui-menu-icon\");\n        this._removeClass(icons, null, this.options.icons.submenu)._addClass(icons, null, value.submenu);\n      }\n      this._super(key, value);\n    },\n    _setOptionDisabled: function (value) {\n      this._super(value);\n      this.element.attr(\"aria-disabled\", String(value));\n      this._toggleClass(null, \"ui-state-disabled\", !!value);\n    },\n    focus: function (event, item) {\n      var nested, focused, activeParent;\n      this.blur(event, event && event.type === \"focus\");\n      this._scrollIntoView(item);\n      this.active = item.first();\n      focused = this.active.children(\".ui-menu-item-wrapper\");\n      this._addClass(focused, null, \"ui-state-active\");\n\n      // Only update aria-activedescendant if there's a role\n      // otherwise we assume focus is managed elsewhere\n      if (this.options.role) {\n        this.element.attr(\"aria-activedescendant\", focused.attr(\"id\"));\n      }\n\n      // Highlight active parent menu item, if any\n      activeParent = this.active.parent().closest(\".ui-menu-item\").children(\".ui-menu-item-wrapper\");\n      this._addClass(activeParent, null, \"ui-state-active\");\n      if (event && event.type === \"keydown\") {\n        this._close();\n      } else {\n        this.timer = this._delay(function () {\n          this._close();\n        }, this.delay);\n      }\n      nested = item.children(\".ui-menu\");\n      if (nested.length && event && /^mouse/.test(event.type)) {\n        this._startOpening(nested);\n      }\n      this.activeMenu = item.parent();\n      this._trigger(\"focus\", event, {\n        item: item\n      });\n    },\n    _scrollIntoView: function (item) {\n      var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;\n      if (this._hasScroll()) {\n        borderTop = parseFloat($.css(this.activeMenu[0], \"borderTopWidth\")) || 0;\n        paddingTop = parseFloat($.css(this.activeMenu[0], \"paddingTop\")) || 0;\n        offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;\n        scroll = this.activeMenu.scrollTop();\n        elementHeight = this.activeMenu.height();\n        itemHeight = item.outerHeight();\n        if (offset < 0) {\n          this.activeMenu.scrollTop(scroll + offset);\n        } else if (offset + itemHeight > elementHeight) {\n          this.activeMenu.scrollTop(scroll + offset - elementHeight + itemHeight);\n        }\n      }\n    },\n    blur: function (event, fromFocus) {\n      if (!fromFocus) {\n        clearTimeout(this.timer);\n      }\n      if (!this.active) {\n        return;\n      }\n      this._removeClass(this.active.children(\".ui-menu-item-wrapper\"), null, \"ui-state-active\");\n      this._trigger(\"blur\", event, {\n        item: this.active\n      });\n      this.active = null;\n    },\n    _startOpening: function (submenu) {\n      clearTimeout(this.timer);\n\n      // Don't open if already open fixes a Firefox bug that caused a .5 pixel\n      // shift in the submenu position when mousing over the caret icon\n      if (submenu.attr(\"aria-hidden\") !== \"true\") {\n        return;\n      }\n      this.timer = this._delay(function () {\n        this._close();\n        this._open(submenu);\n      }, this.delay);\n    },\n    _open: function (submenu) {\n      var position = $.extend({\n        of: this.active\n      }, this.options.position);\n      clearTimeout(this.timer);\n      this.element.find(\".ui-menu\").not(submenu.parents(\".ui-menu\")).hide().attr(\"aria-hidden\", \"true\");\n      submenu.show().removeAttr(\"aria-hidden\").attr(\"aria-expanded\", \"true\").position(position);\n    },\n    collapseAll: function (event, all) {\n      clearTimeout(this.timer);\n      this.timer = this._delay(function () {\n        // If we were passed an event, look for the submenu that contains the event\n        var currentMenu = all ? this.element : $(event && event.target).closest(this.element.find(\".ui-menu\"));\n\n        // If we found no valid submenu ancestor, use the main menu to close all\n        // sub menus anyway\n        if (!currentMenu.length) {\n          currentMenu = this.element;\n        }\n        this._close(currentMenu);\n        this.blur(event);\n\n        // Work around active item staying active after menu is blurred\n        this._removeClass(currentMenu.find(\".ui-state-active\"), null, \"ui-state-active\");\n        this.activeMenu = currentMenu;\n      }, all ? 0 : this.delay);\n    },\n    // With no arguments, closes the currently active menu - if nothing is active\n    // it closes all menus.  If passed an argument, it will search for menus BELOW\n    _close: function (startMenu) {\n      if (!startMenu) {\n        startMenu = this.active ? this.active.parent() : this.element;\n      }\n      startMenu.find(\".ui-menu\").hide().attr(\"aria-hidden\", \"true\").attr(\"aria-expanded\", \"false\");\n    },\n    _closeOnDocumentClick: function (event) {\n      return !$(event.target).closest(\".ui-menu\").length;\n    },\n    _isDivider: function (item) {\n      // Match hyphen, em dash, en dash\n      return !/[^\\-\\u2014\\u2013\\s]/.test(item.text());\n    },\n    collapse: function (event) {\n      var newItem = this.active && this.active.parent().closest(\".ui-menu-item\", this.element);\n      if (newItem && newItem.length) {\n        this._close();\n        this.focus(event, newItem);\n      }\n    },\n    expand: function (event) {\n      var newItem = this.active && this._menuItems(this.active.children(\".ui-menu\")).first();\n      if (newItem && newItem.length) {\n        this._open(newItem.parent());\n\n        // Delay so Firefox will not hide activedescendant change in expanding submenu from AT\n        this._delay(function () {\n          this.focus(event, newItem);\n        });\n      }\n    },\n    next: function (event) {\n      this._move(\"next\", \"first\", event);\n    },\n    previous: function (event) {\n      this._move(\"prev\", \"last\", event);\n    },\n    isFirstItem: function () {\n      return this.active && !this.active.prevAll(\".ui-menu-item\").length;\n    },\n    isLastItem: function () {\n      return this.active && !this.active.nextAll(\".ui-menu-item\").length;\n    },\n    _menuItems: function (menu) {\n      return (menu || this.element).find(this.options.items).filter(\".ui-menu-item\");\n    },\n    _move: function (direction, filter, event) {\n      var next;\n      if (this.active) {\n        if (direction === \"first\" || direction === \"last\") {\n          next = this.active[direction === \"first\" ? \"prevAll\" : \"nextAll\"](\".ui-menu-item\").last();\n        } else {\n          next = this.active[direction + \"All\"](\".ui-menu-item\").first();\n        }\n      }\n      if (!next || !next.length || !this.active) {\n        next = this._menuItems(this.activeMenu)[filter]();\n      }\n      this.focus(event, next);\n    },\n    nextPage: function (event) {\n      var item, base, height;\n      if (!this.active) {\n        this.next(event);\n        return;\n      }\n      if (this.isLastItem()) {\n        return;\n      }\n      if (this._hasScroll()) {\n        base = this.active.offset().top;\n        height = this.element.innerHeight();\n\n        // jQuery 3.2 doesn't include scrollbars in innerHeight, add it back.\n        if ($.fn.jquery.indexOf(\"3.2.\") === 0) {\n          height += this.element[0].offsetHeight - this.element.outerHeight();\n        }\n        this.active.nextAll(\".ui-menu-item\").each(function () {\n          item = $(this);\n          return item.offset().top - base - height < 0;\n        });\n        this.focus(event, item);\n      } else {\n        this.focus(event, this._menuItems(this.activeMenu)[!this.active ? \"first\" : \"last\"]());\n      }\n    },\n    previousPage: function (event) {\n      var item, base, height;\n      if (!this.active) {\n        this.next(event);\n        return;\n      }\n      if (this.isFirstItem()) {\n        return;\n      }\n      if (this._hasScroll()) {\n        base = this.active.offset().top;\n        height = this.element.innerHeight();\n\n        // jQuery 3.2 doesn't include scrollbars in innerHeight, add it back.\n        if ($.fn.jquery.indexOf(\"3.2.\") === 0) {\n          height += this.element[0].offsetHeight - this.element.outerHeight();\n        }\n        this.active.prevAll(\".ui-menu-item\").each(function () {\n          item = $(this);\n          return item.offset().top - base + height > 0;\n        });\n        this.focus(event, item);\n      } else {\n        this.focus(event, this._menuItems(this.activeMenu).first());\n      }\n    },\n    _hasScroll: function () {\n      return this.element.outerHeight() < this.element.prop(\"scrollHeight\");\n    },\n    select: function (event) {\n      // TODO: It should never be possible to not have an active item at this\n      // point, but the tests don't trigger mouseenter before click.\n      this.active = this.active || $(event.target).closest(\".ui-menu-item\");\n      var ui = {\n        item: this.active\n      };\n      if (!this.active.has(\".ui-menu\").length) {\n        this.collapseAll(event, true);\n      }\n      this._trigger(\"select\", event, ui);\n    },\n    _filterMenuItems: function (character) {\n      var escapedCharacter = character.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\"),\n        regex = new RegExp(\"^\" + escapedCharacter, \"i\");\n      return this.activeMenu.find(this.options.items)\n\n      // Only match on items, not dividers or other content (#10571)\n      .filter(\".ui-menu-item\").filter(function () {\n        return regex.test(String.prototype.trim.call($(this).children(\".ui-menu-item-wrapper\").text()));\n      });\n    }\n  });\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}